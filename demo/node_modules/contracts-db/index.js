const SDK = require('dat-sdk')
const { Hypercore, Hyperdrive, resolveName, deleteStorage, destroy } = SDK()

module.exports = contractsDB

function contractsDB (daturl) {
  const contracts = []
  let waitingQuery = null
  let ready = false

  // ADD MOLOCH DAO - for the demo @TODO remove after the demo
  const moloch = require('./moloch-demo.sol')
  contracts.push({
    source: moloch,
    title: 'Moloch.sol',
    hash: '0x1234567345678903456'
  })

  var counter = 0
  const archive = Hyperdrive(daturl)
  return { getAll, get }

  function get (query, done) {
    if (!ready) {
      waitingQuery = [query, done]
      return
    }
    const match = { sources: [], titles: [], hashes: [] }
    const formattedSources = [...sources]
    for (var i = 0; i < sources.length; i++) {
      const temp = formattedSources[i].replace(/\n. |\r/g, "")
      if (temp.includes(query)) {
        match.sources.push(sources[i])
        match.titles.push(titles[i])
        match.hashes.push(hashes[i])
      }
    }
    done(match)
  }
  // retrieve all sources
  function getAll (done) {
    archive.ready(() => {
      archive.readdir('.', (err, addresses) => {
        if (err) return done(err)
        if (addresses) {
          for (var i=0; i<addresses.length; i++) {
            getContractsArr(i, addresses, done)
          }
        }
      })
    })
  }
  // loop over address/src/sourcesArr
  function getContractsArr (x, addresses, done) {
    archive.readdir(`${addresses[x]}/src/`, (err, sourcesArr) => {
      if (err) return done(err)
      if (sourcesArr) {
        counter = counter + sourcesArr.length
        for (var i=0; i<sourcesArr.length; i++) {
          getSourceCode(x, i, addresses, sourcesArr, addresses[x], done)
        }
      }
    })
  }
  // get source code and oush it to `sources` array
  function getSourceCode (x, i, addresses, sourcesArr, hash, done) {
    archive.readFile(`${addresses[x]}/src/${sourcesArr[i]}`, 'utf8', (err, contract) => {
      if (err) return done(err) // console.log(err)
      contracts.push({ source: contract, title: sourcesArr[i], hash: hash })
      if (counter === contracts.length) {
        ready = true
        if (waitingQuery) get(waitingQuery[0], waitingQuery[1])
        done(null, contracts)
      }
    })
  }
}
