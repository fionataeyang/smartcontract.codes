const SDK = require('dat-sdk')
const { Hypercore, Hyperdrive, resolveName, deleteStorage, destroy } = SDK()

module.exports = contractsDB

function contractsDB (daturl) {
  // ADD MOLOCH DAO - for the demo @TODO remove after the demo
  // const moloch = require('./moloch-demo.sol')
  // contracts.push({
  //   source: moloch,
  //   title: 'Moloch.sol',
  //   hash: '0x1234567345678903456'
  // })

  const archive = Hyperdrive(daturl)
  return { get, getAllPaths, getData }

 // search
  function get (button, query, notify) {
    const matches = []
    button.innerText = 'Searching... 0%'
    const allPaths = getAllPaths((err, allPaths) => {
      if (err) console.error(err)
      searchData(button, allPaths, (err, contract, contracts, isDone) => {
        if (err) console.error(err)
        const temp = contract.source.replace(/\n. |\r/g, "")
        if (temp.includes(query)) matches.push({
          source: contract.source,
          title: contract.title,
          hash: contract.hash
        })
        if (isDone) button.innerText = 'search contracts'
        notify({ type: 'searchDB', body: matches })
      })
    })
  }
    // retrieve all file paths
  function getAllPaths (done) {
    console.log('Retreiving data from the P2P database')
    archive.ready(() => {
      archive.readdir('.', (err, filePaths) => {
        if (err) return done(err)
        done(null, filePaths)
      })
    })
  }

  function getData (filePaths, done) {
    const contracts = []
    const counter =filePaths.length
    if (filePaths) {
      for (var i=0; i<counter; i++) {
        getFile(contracts, counter, filePaths[i], done)
      }
    }
  }

  // get data
  function getFile (contracts, counter, filepath, done) {
    archive.readFile(filepath, 'utf8', (err, result) => {
      if (err) return done(err) // console.log(err)
      const data = JSON.parse(result)
      contracts.push({
        source: data.sourceCode,
        title: data.contractName,
        hash: data.address
      })
      console.log(`Contracts retreived: ${contracts.length}`)
      if (counter === contracts.length) done(null, contracts)
    })
  }

  /*----------------------------------
                  SEARCH
  ---------------------------------- */

    function searchData (button, filePaths, done) {
      const contracts = []
      const counter =filePaths.length
      if (filePaths) {
        for (var i=0; i<counter; i++) {
          getSearchFile(button, contracts, counter, filePaths[i], done)
        }
      }
    }

    // get data from search
    function getSearchFile (button, contracts, counter, filepath, done) {
      archive.readFile(filepath, 'utf8', (err, result) => {
        if (err) return done(err) // console.log(err)
        const data = JSON.parse(result)
        button.innerText = `Searching... ${Math.floor(contracts.length/counter * 100)}%`
        const contract = {
          source: data.sourceCode,
          title: data.contractName,
          hash: data.address
        }
        contracts.push(contract)
        const isDone = (counter === contracts.length)
        console.log(`Contracts retreived: ${contracts.length}`)
        return done(err, contract, contracts, isDone)
      })
    }


}
