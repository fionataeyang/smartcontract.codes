const SDK = require('dat-sdk')
const { Hypercore, Hyperdrive, resolveName, deleteStorage, destroy } = SDK()

var ids = 1
const cancelled = {}

module.exports = contractsDB

function contractsDB (daturl) {
  // ADD MOLOCH DAO - for the demo @TODO remove after the demo
  // const moloch = require('./moloch-demo.sol')
  // contracts.push({
  //   source: moloch,
  //   title: 'Moloch.sol',
  //   hash: '0x1234567345678903456'
  // })

  const archive = Hyperdrive(daturl)
  return { search, list, get, cancel}

  function search (query, notify) {
    const id = ids++
    setTimeout(() => {
      list((err, allPaths) => {
        if (!cancelled[id]) {
          notify({ type: 'progress', id, body: [0, allPaths.length]})
        }
        if (err) console.error(err)
        searchData(allPaths, (err, contract, progress) => {
          if (err) console.error(err)
          var temp = normalizeWS(contract.source)
          var formattedQuery = normalizeWS(query)
          if (temp.includes(formattedQuery)) {
            if (!cancelled[id]) {
              notify({
                type: 'searchResult',
                id,
                body: contract.path
              })
            }
          }
          if (!cancelled[id]) {
            notify({ type: 'progress', id, body: progress })
          }
        })
      })
    }, 0)
    return id
  }

  function normalizeWS(s) {
    s = s.match(/\S+/g);
    return s ? s.join(' ') : '';
  }
  function cancel (id) {
    cancelled[id] = true
  }
  function list (done) {
    archive.ready(() => {
      archive.readdir('.', (err, filePaths) => {
        if (err) return done(err)
        done(null, filePaths)
      })
    })
  }
  function get (filePaths, done) {
    filePaths = [].concat(filePaths) // if single path, make array
    const contracts = []
    const counter = filePaths.length
    for (var i=0; i<counter; i++) {
      getFile(contracts, counter, filePaths[i], done)
    }
  }
  function getFile (contracts, counter, filepath, done) {
    archive.readFile(filepath, 'utf8', (err, result) => {
      if (err) return done(err) // console.log(err)
      const data = JSON.parse(result)
      contracts.push({
        source: data.sourceCode,
        title: data.contractName,
        hash: data.address
      })
      console.log(`Source codes retreived: ${contracts.length}`)
      if (counter === contracts.length) done(null, contracts)
    })
  }
  function searchData (filePaths, next) {
    const contracts = []
    const counter = filePaths.length
    if (filePaths) {
      for (var i=0; i<counter; i++) {
        getSearchFile(contracts, counter, filePaths[i], next)
      }
    }
  }

  function getSearchFile (contracts, counter, filepath, next) {
    archive.readFile(filepath, 'utf8', (err, result) => {
      if (err) return done(err) // console.log(err)
      const data = JSON.parse(result)
      const contract = {
        source: data.sourceCode,
        path: filepath
      }
      contracts.push(contract)
      console.log(`Contracts searched: ${contracts.length}`)
      return next(err, contract, [contracts.length, counter])
    })
  }

}
