const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('svg')
const getCurrentPage = require('getCurrentPage')

module.exports = pagination

function pagination ({ count }, notify) {
  if (!count) return
  let active, now = getCurrentPage(), pagination = makePagination()
  return pagination
  function makePagination () {
    const arr = count < 10 ? [...Array(count)].map((_, i)=>i+1)
      : now < 5 ? [1, 2, 3, 4, 5, 6, '...', count-1, count]
        : now < count-4 ?
          [1, 2, '...', now-1, now, now + 1, '...', count-1, count]
          : [1, 2, '...', count-5, count-4, count-3, count-2, count-1, count]
    if (active) {
      active.classList.remove(css.active)
      active.classList.add(css.nonactive)
    }
    const pages = bel`<ul class=${css.pages} onclick=${(e)=>selectPage(e)}>
      ${arr.map(x => x === '...' ?
        bel`<li class=${css.dotdotdot}>${x}</li>`
        : x === now ?
          (active = bel`<li class="${css.active}" data-page=${x}>${x}</li>`)
          : bel`<li class="${css.nonactive}" data-page=${x}>${x}</li>`
      )}
    </div>`
    const grid = `auto / repeat(${count < 10 ? count : 9}, 45px)`
    pages.style.setProperty('--grid-template', grid)
    return bel`
      <div class=${css.pagination}>
        ${now !== 1 && count > 1 ? bel`<button class="${css.button} ${css.default} ${css.previous}" onclick=${prev}>
          <span class=${css.icon_arrow_right}>${icon('arrow-left', svg.arrowLeft)}</span>
        </button>`: ''}
        ${pages}
        ${now !== count && count > 1 ? bel`<button class="${css.button} ${css.default} ${css.next}" onclick=${next}>
          <span class=${css.icon_arrow_right}>${icon('arrow-right', svg.arrowRight)}</span>
        </button>` : ''}
      </div>`
  }
  function selectPage (e) { gotoPage(e.target.dataset.page) }
  function next () { gotoPage(Number(active.dataset.page) + 1) }
  function prev () {  gotoPage(Number(active.dataset.page) - 1) }
  function gotoPage (newPage) {
    now = Number(newPage)
    if (!now) return
    const newPagination = makePagination()
    pagination.replaceWith(newPagination)
    pagination = newPagination
    const base = getCurrentPage() != 1 ?
     `${window.location.origin}${window.location.pathname}`.split('/?page=')[0]
     : `${window.location.origin}${window.location.pathname}`.split(' ')[0]
    let url = base + `?page=${newPage}`
    history.pushState(null, null, url)
    notify({ type: 'paginate', body: newPage })
  }
}
const css = csjs`
  .pagination {
    grid-area: pagination;
    text-align: center;
    padding-bottom: 60px;
  }
  .button {
    font-size: var(--button-default-font-size);
    vertical-align: middle;
  }
  .default {
    padding: 6px 20px;
    border: var(--button-border);
    color: var(--button-default-text);
    background-color: var(--button-default);
    box-shadow: var(--button-box-shadow);
    border-radius: var(--button-default-radius);
    transition: background-color .3s ease-in-out;
    -webkit-transition: background-color .3s ease-in-out;
    -moz-transition: background-color .3s ease-in-out;
    -o-transition: background-color .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: text-top;
  }
  .icon_arrow_left svg g, .icon_arrow_right svg g {
    fill: var(--pagination-button-icon-fill);
    transition: fill .3s ease-in-out;
    -webkit-transition: fill .3s ease-in-out;
    -moz-transition: fill .3s ease-in-out;
    -o-transition: fill .3s ease-in-out;
  }
  .previous {
    border: var(--button-border);
    background: transparent;
  }
  .next {
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: var(--grid-template);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-small);
  }
  .dotdotdot {
    padding: 4px 8px;
    color: var(--pages-text);
  }
  .nonactive {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
  }
  .nonactive:hover {
    background: var(--pages-hover-background);
    cursor: pointer;
  }
  .active {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    background: var(--pages-current-background);
    color: var(--pages-text-active);
  }

  @media (max-width: 560px) {
    .pages {
      display: none;
    }
    .pagination {
      display: grid;
      grid-template-columns: 1fr 1fr;
      justify-content: space-between;
    }
    .previous {
      justify-self: start;
    }
    .next {
      justify-self: end;
    }
  }
`
