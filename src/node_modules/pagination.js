const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('svg')

module.exports = pagination

function pagination ({ count, cardsCount = 8 /* cards per page */ }, notify) {
  const lastPage = count <= cardsCount ? null : Math.ceil(count / cardsCount)
  const pageCount = Math.ceil(count / cardsCount)
  const firstPage = bel`<span onclick=${select} class=${css.active}>1</span>`
  const active = firstPage
  const pages = makePaginationButtons()
  const el = bel`
    <div class=${css.pagination}>
      <button class="${css.button} ${css.default} ${css.previous}" onclick=${prev}>
        <span class=${css.icon_arrow_right}>
          ${icon('arrow-left', svg.arrowLeft)}
        </span>
        Previous
      </button>
      ${pages}
      <button class="${css.button} ${css.default} ${css.next}" onclick=${next}>
        Next
        <span class=${css.icon_arrow_right}>
          ${icon('arrow-right', svg.arrowRight)}
        </span>
      </button>
    </div>`
  return el
  function select (e) {
    selectPage(e, 1)
  }
  function prev (e) {
    goToPrevious(pages)
  }
  function next (e) {
    goToNext(pages)
  }
  function makePaginationButtons () {
    const pages = bel`<ul class=${css.pages}><li>${firstPage}</li></ul>`
    const grid = `auto / repeat(${ pageCount < 6 ? pageCount + 1 : 5 }, 45px)`
    console.log(grid)
    pages.style.setProperty('--grid-template', grid)
    const arr = pageCount < 6 ? [...Array(pageCount)].map((_,i) => i + 1) : [
      2, '...', pageCount-1, pageCount
    ]
    arr.forEach(page => {
      if (page != '...') {
        pages.appendChild(bel`<li><span
          onclick=${(e)=>selectPage(e, page)}
          class=${css.nonactive}>${page}
          </span></li>`)
      } else {
        pages.appendChild(bel`<li><span class=${css.nonactive}>${page}</span></li>`)
      }
    })
    return pages
  }
  function selectPage (e, page) {
    removeActiveEl(active)
    activateNewEl(e.target)
    goToUrl(page)
  }
  function removeActiveEl (active) {
    if (active) {
      active.classList.remove(css.active)
      active.classList.add(css.nonactive)
    }
  }
  function activateNewEl (el) {
    el.classList.remove(css.nonactive)
    el.classList.add(css.active)
    active = el
  }
  function getCurrentPage () {
    return parseInt(window.location.href.split('/?page=')[1]) || 1
  }
  function goToNext (ops, collectionContainer, pages) {
    let currentPage = getCurrentPage()
    let newPage = currentPage + 1
    if (currentPage != ops.lastPage) {
      removeActiveEl(active)
      ;[...pages.children].forEach((li) => {
        let page = li.children[0]
        if (parseInt(page.innerText) === newPage) activateNewEl(page)
      })
      goToUrl(newPage)
    }
  }
  function goToPrevious (ops, collectionContainer, pages) {
    let currentPage = getCurrentPage()
    let newPage = currentPage - 1
    if (currentPage != 1) {
      removeActiveEl(active)
      ;[...pages.children].forEach((li) => {
        let page = li.children[0]
        if (parseInt(page.innerText) === newPage) activateNewEl(page)
      })
      goToUrl(newPage)
    }
  }
  function goToUrl(newPage) {
    const base = getCurrentPage() != 1 ?
     `${window.location.origin}${window.location.pathname}`.split('/?page=')[0]
     : `${window.location.origin}${window.location.pathname}`.split(' ')[0]
    let url = base + `?page=${newPage}`
    history.pushState(null, null, url)
    notify({ type: 'paginate', body: newPage })
  }
}
const css = csjs`
  .pagination {
    grid-area: pagination;
    text-align: center;
    padding-bottom: 60px;
  }
  .button {
    font-size: var(--button-default-font-size);
    vertical-align: middle;
  }
  .default {
    padding: var(--button-default-padding);
    border: var(--button-border);
    color: var(--button-default-text);
    background-color: var(--button-default);
    box-shadow: var(--button-box-shadow);
    border-radius: var(--button-default-radius);
    transition: all .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: text-top;
  }
  .icon_arrow_left svg g, .icon_arrow_right svg g {
    fill: var(--pagination-button-icon-fill);
    transition: all .3s ease-in-out;
  }
  .previous {
    border: var(--button-border);
    padding-right: var(--button-padding-right);
    background: transparent;
  }
  .next {
    padding-left: var(--button-padding-left);
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: var(--grid-template);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-small);
  }
  .nonactive {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
  }
  .nonactive:hover {
    background: var(--pages-hover-background);
    cursor: pointer;
  }
  .active {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    background: var(--pages-current-background);
    color: var(--pages-text-active);
  }

  @media (max-width: 560px) {
    .pages {
      display: none;
    }
    .pagination {
      display: grid;
      grid-template-columns: 1fr 1fr;
      justify-content: space-between;
    }
    .previous {
      justify-self: start;
    }
    .next {
      justify-self: end;
    }
  }
`
