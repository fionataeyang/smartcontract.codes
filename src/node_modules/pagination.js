const bel = require('bel')
const csjs = require('csjs-inject')
const icon = require('icon')
const svg = require('svg')

module.exports = pagination

function pagination ({ array, cardsCount = 8 }, notify) {
  const count = array.length
  if (!count) return
  const lastPage = count <= cardsCount ? null : Math.ceil(count / cardsCount)
  const pageCount = Math.ceil(count / cardsCount)
  let active = {}
  const pages = makePaginationButtons()
  const el = bel`
    <div class=${css.pagination}>
      <button class="${css.button} ${css.default} ${css.previous}" onclick=${() => prev(pages)}>
        <span class=${css.icon_arrow_right}>${icon('arrow-left', svg.arrowLeft)}</span>
      </button>
      ${pages}
      <button class="${css.button} ${css.default} ${css.next}" onclick=${() => next(pages)}>
        <span class=${css.icon_arrow_right}>${icon('arrow-right', svg.arrowRight)}</span>
      </button>
    </div>`
  return el

  function makePaginationButtons () {
    const pages = bel`<ul class=${css.pages}></ul>`
    const grid = `auto / repeat(${ pageCount < 6 ? pageCount : 5 }, 45px)`
    const first = bel`<li><span onclick=${(e) => selectPage(e, 1)} class=${css.active}>1</span></li>`
    active = { page: 1, el: first.children[0] }
    pages.style.setProperty('--grid-template', grid)
    const arr = pageCount < 6 ?
      [...Array(pageCount)].map((_,i) => i + 1)
      : [1, 2, '...', pageCount-1, pageCount]
    arr.map(page => {
      if (page === 1) {
        pages.appendChild(first)
      }
      else {
        if (page === '...') { pages.appendChild(bel`<li><span class=${css.dotdotdot}>${page}</span></li>`) }
        else {
          pages.appendChild(
            bel`<li><span onclick=${(e)=>selectPage(e, page)} class=${css.nonactive}>${page}</span></li>`)
        }
      }
    })
    return pages
  }
  function selectPage (e, page) {
    removeActiveEl()
    updateActive(page, e.target)
    goToUrl(page)
  }
  function removeActiveEl () {
    if (active.el) {
      active.el.classList.remove(css.active)
      active.el.classList.add(css.nonactive)
    }
  }
  function updateActive (page, el) {
    el.classList.remove(css.nonactive)
    el.classList.add(css.active)
    active = { page: page, el: el }
  }
  function getCurrentPage () {
    return parseInt(window.location.href.split('/?page=')[1]) || 1
  }
  function next (pages) {
    let currentPage = getCurrentPage()
    let newPage = currentPage + 1
    if (currentPage != lastPage && lastPage != null) {
      removeActiveEl()
      ;[...pages.children].forEach((li) => {
        let el = li.children[0]
        if (parseInt(el.innerText) === newPage) updateActive(newPage, el)
      })
      goToUrl(newPage)
    }
  }
  function prev (pages) {
    let currentPage = getCurrentPage()
    let newPage = currentPage - 1
    if (currentPage != 1) {
      removeActiveEl()
      ;[...pages.children].forEach((li) => {
        let el = li.children[0]
        if (parseInt(el.innerText) === newPage) updateActive(newPage, el)
      })
      goToUrl(newPage)
    }
  }
  function goToUrl(newPage) {
    const base = getCurrentPage() != 1 ?
     `${window.location.origin}${window.location.pathname}`.split('/?page=')[0]
     : `${window.location.origin}${window.location.pathname}`.split(' ')[0]
    let url = base + `?page=${newPage}`
    history.pushState(null, null, url)
    notify({ type: 'paginate', body: { array, page: newPage } })
  }
}
const css = csjs`
  .pagination {
    grid-area: pagination;
    text-align: center;
    padding-bottom: 60px;
  }
  .button {
    font-size: var(--button-default-font-size);
    vertical-align: middle;
  }
  .default {
    padding: 6px 20px;
    border: var(--button-border);
    color: var(--button-default-text);
    background-color: var(--button-default);
    box-shadow: var(--button-box-shadow);
    border-radius: var(--button-default-radius);
    transition: background-color .3s ease-in-out;
    -webkit-transition: background-color .3s ease-in-out;
    -moz-transition: background-color .3s ease-in-out;
    -o-transition: background-color .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: text-top;
  }
  .icon_arrow_left svg g, .icon_arrow_right svg g {
    fill: var(--pagination-button-icon-fill);
    transition: fill .3s ease-in-out;
    -webkit-transition: fill .3s ease-in-out;
    -moz-transition: fill .3s ease-in-out;
    -o-transition: fill .3s ease-in-out;
  }
  .previous {
    border: var(--button-border);
    background: transparent;
  }
  .next {
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: var(--grid-template);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-small);
  }
  .dotdotdot {
    padding: 4px 8px;
    color: var(--pages-text);
  }
  .nonactive {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
  }
  .nonactive:hover {
    background: var(--pages-hover-background);
    cursor: pointer;
  }
  .active {
    border-radius: var(--pages-text-border-radius);
    padding: 4px 8px;
    background: var(--pages-current-background);
    color: var(--pages-text-active);
  }

  @media (max-width: 560px) {
    .pages {
      display: none;
    }
    .pagination {
      display: grid;
      grid-template-columns: 1fr 1fr;
      justify-content: space-between;
    }
    .previous {
      justify-self: start;
    }
    .next {
      justify-self: end;
    }
  }
`
