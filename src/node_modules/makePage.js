const bel = require('bel')
const csjs = require('csjs-inject')

const header = require('header')
const search = require('search')
const makePagination = require('pagination')
const makeCollectionArea = require('makeCollectionArea')

module.exports = makePage

function makePage (options, notify) {
  const { db, themes } = data
  const cardsCount = 8
  const collectionContainer = bel`<div></div>`
  const navigation = bel`<div></div>`
  const element = bel`<div class=${css.wrapper}>
      ${header()}
      <div class=${css.content}>
        ${themeSwitch()}
        ${search(action => {
          if (action.type === 'search') {
            const query = action.body
            db.get(query, matchingContracts => showMatches(matchingContracts))
          }
        })}
        ${collectionContainer}
        ${navigation}
      </div>
  </div>`
  db.getContracts((err, contracts) => {
    if (err) return console.error(err)
    const count = contracts.length
    const pagination = makePagination({ count, cardsCount }, listener)
    updateCollectionArea(contracts.slice(0, cardsCount - 1))
    navigation.appendChild(pagination)
  })
  return element
  function listener (action) {
    if (action.type === 'paginate') {
      const page = action.body
      const b = page * cardsCount - 1
      const a = b - cardsCount
      updateCollectionArea(contracts.slice(a, b))
    }
  }
  function updateCollectionArea (contracts) {
    const collectionArea = makeCollectionArea(contracts)
    collectionContainer.innerHTML = ''
    collectionContainer.appendChild(collectionArea)
  }
  function updatePagination ({ count, cardsCount }) {
    const pagination = makePagination({ count, cardsCount }, listener)
    navigation.innerHTML = ''
    navigation.appendChild(pagination)
  }
  function showMatches (matchingContracts) {
    updateCollectionArea(matchingContracts)
    var count = matchingContracts.length
    updatePagination({ count, cardsCound })
    let url = `${window.location.origin}${window.location.pathname}?page=1`
    history.pushState(null, null, url)
  }
  function clickAction() { location.url = '' }
  function closeAction() { location.url = '' }
  function themeSwitch () {
    return bel`<div class=${css.themeSwitch}>
      <span class="${css.colorplate} ${css.cubeWhite}" onclick=${() => notify({ type: 'theme', body: 'lightTheme' })}></span>
      <span class="${css.colorplate} ${css.cubeDark}" onclick=${() => notify({ type: 'theme', body: 'darkTheme' })}></span>
    </div>`
  }
}
const css = csjs`
  .wrapper {
    display: grid;
    grid-template-areas:
      "header"
      "content";
    grid-template-rows: 120px 1fr;
    grid-template-columns: 100%;
    padding: var(--wrapper-padding);
  }
  .content {
    grid-area: content;
    display: grid;
    grid-template-areas:
      "themeSwitch"
      "search"
      "collection"
      "pagination"
  }
  .themeSwitch {
    grid-area: themeSwitch;
    justify-self: end;
    padding-bottom: 15px;
  }
  .colorplate {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-left: 5px;
    border: 1px solid #888;
    border-radius: 6px;
    cursor: pointer;
  }
  .cubeWhite {
    background-color: #fff;
  }
  .cubeDark {
    background-color: #1D1D26;
  }
  @media (max-width: 420px) {
    .wrapper {
      padding: 0 20px;
    }
  }
`
