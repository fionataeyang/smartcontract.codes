const bel = require('bel')
const csjs = require('csjs-inject')

const header = require('header')
const search = require('search')
const makePagination = require('pagination')
const makeCollectionArea = require('makeCollectionArea')
const makeCard = require('makeCard')
const loading = require('loading')

module.exports = makePage

function makePage (data, notify) {
  const { db, themes } = data
  const cardsCount = 8
  let activeSession
  const collectionContainer = bel`<div>${loading()}</div>`
  const navigation = bel`<div></div>`
  const element = bel`<div class=${css.wrapper}>
      ${header()}
      <div class=${css.content}>
        ${themeSwitch()}
        ${search(action => {
          if (action.type === 'search') {
            const query = action.body
            const searchSession = { query, results: [], cards: 0 }
            if (activeSession) db.cancel(activeSession.id)
            searchSession.id = db.search(query, action => {
              listenSearch(searchSession, action)
            })
            activeSession = searchSession
          }
        })}
        ${collectionContainer}
        ${navigation}
      </div>
  </div>`
  db.list((err, filePaths) => {
    if (err) return console.error(err)
    if (activeSession) return
    const pagination = makePagination({ filePaths, cardsCount }, listenPagination)
    db.get(filePaths.slice(0, cardsCount), (err, contracts) => {
      if (err) return console.error(err)
      if (activeSession) return
      updateCollectionArea(contracts)
      navigation.appendChild(pagination)
    })
  })
  return element
  function listenPagination (action) {
    if (action.type === 'paginate') {
      const { filePaths, page } = action.body
      const b = page != 1 ? page * cardsCount - 1 : cardsCount
      const a = page != 1 ? b - cardsCount : 0
      db.get(filePaths.slice(a, b), (err, contracts) => {
        if (err) return console.error(err)
        updateCollectionArea(contracts)
      })
    }
  }
  function listenSearch (session, action) {
    if (action.type === 'searchResult') {
      addMatch(session, action.body)
    }
    if (action.type === 'progress') {
      const [current, total] = session.progress = action.body
      //let progress = Math.floor(current / total * 100)
      if (current === 0) {
        collectionContainer.innerHTML = ''
        navigation.innerHTML = ''
        let url = `${window.location.origin}${window.location.pathname}?page=1`
        history.pushState(null, null, url)
      } else if (current === total) {
        if (!session.area) {
          const el = bel`<div class=${css.noResult}>No matches found</div>`
          collectionContainer.appendChild(el)
        }
      }
    }
  }
  function updateCollectionArea (contracts) {
    const collectionArea = makeCollectionArea(contracts)
    collectionContainer.innerHTML = ''
    collectionContainer.appendChild(collectionArea)
  }
  function addMatch (session, filepath) {
    if (!session.area) {
      session.area = makeCollectionArea([])
      collectionContainer.appendChild(session.area)
    }
    const filePaths = session.results
    filePaths.push(filepath)
    const length = filePaths.length
    if (length <= cardsCount) {
      db.get(filepath, (err, contracts) => {
        session.cards++
        if (err) return console.error(err)
        session.area.appendChild(makeCard(contracts[0]))
      })
    }
    if (session.cards === cardsCount) {
      if (!session.pagination) {
        session.pagination = true
        updatePagination({ filePaths, cardsCount })
      }
      if (length % cardsCount === 0) updatePagination({ filePaths, cardsCount })
    }
  }

  function updatePagination ({ filePaths, cardsCount }) {
    const pagination = makePagination({ filePaths, cardsCount }, listenPagination)
    navigation.innerHTML = ''
    navigation.appendChild(pagination)
  }

  function clickAction() { location.url = '' }
  function closeAction() { location.url = '' }
  function themeSwitch () {
    return bel`<div class=${css.themeSwitch}>
      <span class="${css.colorplate} ${css.cubeWhite}" onclick=${() => notify({ type: 'theme', body: 'lightTheme' })}></span>
      <span class="${css.colorplate} ${css.cubeDark}" onclick=${() => notify({ type: 'theme', body: 'darkTheme' })}></span>
    </div>`
  }
}
const css = csjs`
  .wrapper {
    display: grid;
    grid-template-areas:
      "header"
      "content";
    grid-template-rows: 120px 1fr;
    grid-template-columns: 100%;
    padding: var(--wrapper-padding);
  }
  .noResult {
    font-size: var(--text-large);
    text-align: center;
    margin-bottom: 60px;
    font-weight: 200;
  }
  .content {
    grid-area: content;
    display: grid;
    grid-template-areas:
      "themeSwitch"
      "search"
      "collection"
      "pagination"
  }
  .themeSwitch {
    grid-area: themeSwitch;
    justify-self: end;
    padding-bottom: 15px;
  }
  .colorplate {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-left: 5px;
    border: 1px solid #888;
    border-radius: 6px;
    cursor: pointer;
  }
  .cubeWhite {
    background-color: #fff;
  }
  .cubeDark {
    background-color: #1D1D26;
  }
  @media (max-width: 420px) {
    .wrapper {
      padding: 0 20px;
    }
  }
`
