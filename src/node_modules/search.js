const bel = require('bel')
const csjs = require('csjs-inject')
let css
const pagination = require('pagination')
const paginationButtons = require('paginationButtons')
const makeCollectionArea = require('makeCollectionArea')
const icon = require('icon')
const svg = require('./svg.json')

module.exports = search

function search (ops) {
  return bel`
    <div  class=${css.searchBar}>
      <div contenteditable="true" class=${css.textarea}>
        <input type="text" placeholder="Search contract"
          onchange=${(e)=>showMatches(e, ops)}"
          onclick="${(e)=>e.target.select()}">
      </div>
      <button class=${css.submit}>search contract</button>
    </div>
  `
}

function showMatches (e, ops) {
  let contracts = ops.contracts
  const noResult = bel`<div class=${css.noResult}>No matches found</div>`
  let val = e.target.value
  let matchingContracts = getMatches(contracts, val)

  // new Collection Area based on search results
  newOps = pagination(matchingContracts)
  newOps.contracts = matchingContracts
  newOps.paginationButtons = ops.paginationButtons
  const oldContainer = document.querySelector("[class^='collectionArea']") ||
    document.querySelector("[class^='noResult']")
  let container = oldContainer.parentNode
  let newContainer = matchingContracts.length > 0 ?
    makeCollectionArea(newOps)
    : noResult
  container.replaceChild(newContainer, oldContainer)

  // new navigation (paginationButtons) based on number of matching search results
  let navigation = ops.paginationButtons
  const oldNavigation = navigation.children[0]
  navigation.replaceChild(paginationButtons(container, newOps), oldNavigation)

  let url = `${window.location.origin}${window.location.pathname}?page=1`
  history.pushState(null, null, url)
}

function getMatches (contracts, val) {
  let match = []
  for(var i=0; i<contracts.length; i++) {
    if (contracts[i].includes(val)) match.push(contracts[i])
  }
  return match
}


// ===== css =====

css = csjs`
  .noResult {}
  .searchBar {
    margin: 0 auto 50px auto;
    width: 420px;
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto 36px;
    justify-items: center;
  }
  input[type="text"] {
    display: none;
  }
  .submit {
    font-size: var(--text-normal);
    background: white;
    width: 250px;
    cursor: pointer;
    line-height: 36px;
    border-radius: 30px;
  }
  .textarea {
    width: calc(100% - 65px);
    border-radius: 4px;
    border: var(--search-input);
    background: var(--search-input-background);
    font-size: var(--search-input-text);
    font-family: 'Inconsolata', monospace;
    padding: 15px;
    color: var(--body-color);
    word-break: break-all;
    margin-bottom: 10px;
    outline: none;
  }
`
