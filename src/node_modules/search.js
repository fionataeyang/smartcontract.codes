const bel = require('bel')
const csjs = require('csjs-inject')
let css
const pagination = require('pagination')
const paginationButtons = require('paginationButtons')
const makeCollectionArea = require('makeCollectionArea')

module.exports = search

function search (ops) {
  const searchArea = bel`
    <div contenteditable="true" class=${css.textarea}"></div>`
  return bel`
    <div class=${css.searchBar}>
      ${searchArea}
      <button class=${css.submit} onclick=${()=>showMatches(ops, searchArea)}>
        search contracts
      </button>
    </div>
  `
}


// ===== helpers =====

function showMatches (ops, searchArea) {
  let contracts = ops.contracts
  const noResult = bel`<div class=${css.noResult}>No matches found</div>`
  let val = getSearchInput(searchArea)
  let matchingContracts = getMatches(contracts, val)

  // new Collection Area based on search results
  newOps = pagination(matchingContracts)
  newOps.contracts = matchingContracts
  newOps.paginationButtons = ops.paginationButtons
  const oldContainer = document.querySelector("[class^='collectionArea']") ||
    document.querySelector("[class^='noResult']")
  let container = oldContainer.parentNode
  let newContainer = matchingContracts.length > 0 ?
    makeCollectionArea(newOps)
    : noResult
  container.replaceChild(newContainer, oldContainer)

  // new navigation (paginationButtons) based on number of matching search results
  let navigation = ops.paginationButtons
  const oldNavigation = navigation.children[0]
  navigation.replaceChild(paginationButtons(container, newOps), oldNavigation)

  let url = `${window.location.origin}${window.location.pathname}?page=1`
  history.pushState(null, null, url)
}

function getSearchInput (searchArea) {
  let searchInput = searchArea.innerText.trim()
  searchInput = searchInput.replace(/\n. |\r/g, "")
  return searchInput
}

function getMatches (contracts, val) {
  let match = []
  for(var i=0; i<contracts.length; i++) {
    let contract = contracts[i].replace(/\n. |\r/g, "")
    if (contract.includes(val)) match.push(contract)
  }
  return match
}


// ===== css =====

css = csjs`
  .noResult {
    font-size: var(--text-large);
    text-align: center;
    margin-bottom: 60px;
    font-weight: 200;
  }
  .searchBar {
    margin: 0 auto 50px auto;
    width: 650px;
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto 36px;
    justify-items: center;
  }
  .submit {
    font-size: var(--text-normal);
    background: white;
    width: 250px;
    cursor: pointer;
    line-height: 36px;
    border-radius: 30px;
  }
  .textarea {
    width: calc(100% - 65px);
    border-radius: 4px;
    border: var(--search-input);
    background: var(--search-input-background);
    font-size: var(--search-input-text);
    font-family: 'Inconsolata', monospace;
    padding: 15px;
    color: var(--body-color);
    word-break: break-all;
    margin-bottom: 10px;
    outline: none;
  }
`
