const bel = require('bel')
const csjs = require('csjs-inject')
const makeCollectionArea = require('makeCollectionArea')
const icon = require('icon')
const svg = require('./svg.json')
let css
let activeEl

module.exports = paginationButtons

function paginationButtons (collectionContainer, ops ) {
  let firstPage = bel`<span
    onclick=${(e)=>selectPage(e, ops, collectionContainer, 1)}
    class=${css.active}> 1 </span>`
  activeEl = firstPage
  let pages = bel`<ul class=${css.pages}><li>${firstPage}</li></ul>`
  let el = bel`
    <div class=${css.pagination}>
      <button class="${css.button} ${css.default} ${css.round} ${css.previous}"
        onclick=${()=>goToPrevious(ops, collectionContainer, pages)}>
        <span class=${css.icon_arrow_right}>
          ${icon('arrow-left', svg.arrowLeft)}
        </span> Previous
      </button>
      ${addPages(ops, collectionContainer, pages)}
      <button class="${css.button} ${css.default} ${css.round} ${css.next}"
        onclick=${()=>goToNext(ops, collectionContainer, pages)}>
        Next <span
          class=${css.icon_arrow_right}>${icon('arrow-right', svg.arrowRight)}
        </span>
      </button>
    </div>`
  return el
}

// ===== helper functions =====

function addPages (ops, container, pages) {
  pageCount = ops.pageCount
  if (pageCount < 6) {
    for (var i=1; i<pageCount; i++) { append(ops, container, pages, i + 1) }
    pages.style.setProperty('--grid-template', `auto / repeat(${pageCount}, 45px)`)
  } else {
    ;[2, '...', pageCount-1, pageCount].forEach(page => append(ops, container, pages, page))
    pages.style.setProperty('--grid-template', `auto / repeat(5, 45px)`)
  }
  return pages
}

function append (ops, container, pages, page) {
  if (page != '...') {
    pages.appendChild(bel`<li><span
      onclick=${(e)=>selectPage(e, ops, container, page)}
      class=${css.nonactive}>${page}
      </span></li>`)
  } else {
    pages.appendChild(bel`<li><span class=${css.nonactive}>${page}</span></li>`)
  }
}

function selectPage (e, ops, container, page) {
  removeActiveEl(activeEl)
  activateNewEl(e.target)
  goToUrl(ops, container, page)
}

function removeActiveEl (activeEl) {
  if (activeEl) {
    activeEl.classList.remove(css.active)
    activeEl.classList.add(css.nonactive)
  }
}

function activateNewEl (el) {
  el.classList.remove(css.nonactive)
  el.classList.add(css.active)
  activeEl = el
}

function getCurrentPage () {
  return parseInt(window.location.href.split('/?page=')[1]) || 1
}

function goToNext (ops, collectionContainer, pages) {
  let currentPage = getCurrentPage()
  let newPage = currentPage + 1
  if (currentPage != ops.lastPage) {
    removeActiveEl(activeEl)
    pages.querySelectorAll('li').forEach((li) => {
      let page = li.children[0]
      if (parseInt(page.innerText) === newPage) activateNewEl(page)
    })
    goToUrl(ops, collectionContainer, newPage)
  }
}

function goToPrevious (ops, collectionContainer, pages) {
  let currentPage = getCurrentPage()
  let newPage = currentPage - 1
  if (currentPage != 1) {
    removeActiveEl(activeEl)
    pages.querySelectorAll('li').forEach((li) => {
      let page = li.children[0]
      if (parseInt(page.innerText) === newPage) activateNewEl(page)
    })
    goToUrl(ops, collectionContainer, newPage)
  }
}

function makeNewCollection (ops, collectionContainer, newPage) {
  const old = collectionContainer.children[0]
  const newCollection = makeCollectionArea(ops)
  collectionContainer.replaceChild(newCollection, old)
}

function goToUrl(ops, collectionContainer, newPage) {
  const base = getCurrentPage() != 1 ?
   `${window.location.origin}${window.location.pathname}`.split('/?page=')[0]
   : `${window.location.origin}${window.location.pathname}`.split(' ')[0]
  let url = base + `?page=${newPage}`
  history.pushState(null, null, url);
  makeNewCollection(ops, collectionContainer, newPage)
}


// ===== css =====
css = csjs`
  .pagination {
    grid-area: pagination;
    text-align: center;
    padding-bottom: 60px;
  }
  .button {
    width: 123px;
    height: 44px;
    font-size: 18px;
    vertical-align: middle;
  }
  .default {
    border: var(--button-border);
    color: var(--button-default-text);
    background-color: var(--button-default);
    box-shadow: var(--button-box-shadow);
    transition: all .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: text-top;
  }
  .icon_arrow_left svg g, .icon_arrow_right svg g {
    fill: var(--pagination-button-icon-fill);
    transition: all .3s ease-in-out;
  }
  .previous {
    border: var(--button-border);
    background: transparent;
  }
  .next {
  }
  .round {
    border-radius: 22px;
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: var(--grid-template);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-small);
    color: #8d8d8d;
  }
  .nonactive {
    border-radius: 4px;
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
  }
  .nonactive:hover {
    background: var(--pages-hover-background);
    cursor: pointer;
  }
  .active {
    border-radius: 4px;
    padding: 4px 8px;
    background: var(--pages-current-background);
  }

  @media (max-width: 560px) {
    .pages {
      display: none;
    }
    .pagination {
      display: grid;
      grid-template-columns: 1fr 1fr;
      justify-content: space-between;
    }
    .previous {
      justify-self: start;
    }
    .next {
      justify-self: end;
    }
  }
`
