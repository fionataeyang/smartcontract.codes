const bel = require('bel')
const csjs = require('csjs-inject')
const makeCollectionArea = require('makeCollectionArea')
let css

module.exports = paginationButtons

function paginationButtons (collectionContainer, ops ) {
  let el = bel`
    <div class=${css.pagination}>
      <div class="${css.previous} ${css.button}"
        onclick=${()=>goToPrevious(ops, collectionContainer)}>Previous
      </div>
      <div class="${css.next} ${css.button}"
        onclick=${()=>goToNext(ops, collectionContainer)}>Next
      </div>
    </div>`
  return el
}

// @TODO
// make it work in production

// ===== helper functions =====

function getCurrentPage () {
  return parseInt(window.location.href.split('/?page=')[1]) || 1
}

function goToNext (ops, collectionContainer) {
  let currentPage = getCurrentPage()
  let newPage = currentPage + 1
  if (currentPage != ops.lastPage) goToPageUrl(newPage)
  makeNewCollection(ops, collectionContainer)
}

function goToPrevious (ops, collectionContainer) {
  let currentPage = getCurrentPage()
  let newPage = currentPage - 1
  if (currentPage != 1) goToPageUrl(newPage)
  makeNewCollection(ops, collectionContainer)
}

function makeNewCollection (ops, collectionContainer) {
  const old = collectionContainer.children[0]
  const newCollection = makeCollectionArea(ops.datas[newPage - 1])
  collectionContainer.replaceChild(newCollection, old)
}

function goToPageUrl(page) {
  const url = getCurrentPage() != 1 ?
   `${window.location.href.split('/?page=')[0]}/?page=${page}`
   : `/?page=${page}`
  history.pushState(null, null, url);
}


// ===== css =====

css = csjs`
  .pagination {
    display: flex;
    justify-content: center;
  }
  .button {
    width: 50px;
    border: 1px solid var(--secondary);
    background-color: var(--primary);
    border-radius: 5px;
    padding: 1%;
    display: flex;
    justify-content: center;
    margin: 5px;
  }
  .button:hover {
    background-color: var(--secondary);
    color: white;
    cursor: pointer;
  }
  .previous {}
  .next {}
`
