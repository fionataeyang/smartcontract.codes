const bel = require('bel')
const csjs = require('csjs-inject')
const makeCollectionArea = require('makeCollectionArea')
const icon = require('icon')
const svg = require('./svg.json')
let css

module.exports = paginationButtons

function paginationButtons (collectionContainer, ops ) {
  let el = bel`
    <div class=${css.pagination}>
      <button class="${css.button} ${css.default} ${css.round} ${css.previous}" onclick=${()=>goToPrevious(ops, collectionContainer)}><span class=${css.icon_arrow_right}>${icon('arrow-left', svg.arrowLeft)}</span> Previous</button>
      <ul class=${css.pages}>
        <li>
          <span class=${css.current}>1</span>
        </li>
        <li>
          <a href="#">2</a>
        </li>
        <li>
          <a href="#">3</a>
        </li>
        <li>
          <a href="#">4</a>
        </li>
        <li>
          <a href="#">5</a>
        </li>
      </ul>
      <button class="${css.button} ${css.default} ${css.round} ${css.next}" onclick=${()=>goToNext(ops, collectionContainer)}>
        Next <span class=${css.icon_arrow_right}>${icon('arrow-right', svg.arrowRight)}</span>
      </button>
    </div>`
  return el
}



// ===== helper functions =====

function getCurrentPage () {
  return parseInt(window.location.href.split('/?page=')[1]) || 1
}

function goToNext (ops, collectionContainer) {
  let currentPage = getCurrentPage()
  let newPage = currentPage + 1
  if (currentPage != ops.lastPage) goToPageUrl(newPage)
  makeNewCollection(ops, collectionContainer)
}

function goToPrevious (ops, collectionContainer) {
  let currentPage = getCurrentPage()
  let newPage = currentPage - 1
  if (currentPage != 1) goToPageUrl(newPage)
  makeNewCollection(ops, collectionContainer)
}

function makeNewCollection (ops, collectionContainer) {
  const old = collectionContainer.children[0]
  const newCollection = makeCollectionArea(ops.datas[newPage - 1])
  collectionContainer.replaceChild(newCollection, old)
}

function goToPageUrl(page) {
  const url = getCurrentPage() != 1 ?
   `${window.location.href.split('/?page=')[0]}/?page=${page}`
   : `/?page=${page}`
  history.pushState(null, null, url);
}


// ===== css =====

css = csjs`
  .pagination {
    grid-area: pagination;
    text-align: center;
    padding-bottom: 60px;
  }
  .button {
    width: 123px;
    height: 44px;
    font-size: 18px;
    vertical-align: middle;
  }
  .default {
    border: var(--button-border);
    color: var(--button-default-text);
    background-color: var(--button-default);
    transition: all .3s ease-in-out;
  }
  .default:hover {
    background-color: var(--button-default-hover);
    color:  var(--button-default-text-hover);
    cursor: pointer;
  }
  .button span {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: text-top;
  }
  .icon_arrow_left svg g, .icon_arrow_right svg g {
    fill: var(--pagination-button-icon-fill);
    transition: all .3s ease-in-out;
  }
  .previous {
    border: var(--button-border);
    background: transparent;
  }
  .next {
  }
  .round {
    border-radius: 22px;
  }
  .pages {
    margin: 0 10px;
    display: inline-grid;
    grid-template: auto / repeat(5, 45px);
    justify-content: center;
    justify-items: center;
    align-items: center;
  }
  .pages li {
    font-size: var(--text-normal);
    color: #8d8d8d8;
  }
  .pages li a {
    border-radius: 4px;
    padding: 4px 8px;
    border: var(--pages-border);
    color: var(--pages-text);
    transition: all .3s ease-in-out;
  }
  .pages li a:hover {
    background: var(--pages-hover-background)
  }
  .current {
    border-radius: 4px;
    padding: 4px 8px;
    background: var(--pages-current-background);
  }

  @media (max-width: 560px) {
    .pages {
      display: none;
    }
    .pagination {
      display: grid;
      grid-template-columns: 1fr 1fr;
      justify-content: space-between;
    }
    .previous {
      justify-self: start;
    }
    .next {
      justify-self: end;
    }
  }
`
